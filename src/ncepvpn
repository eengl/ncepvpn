#!/usr/bin/env bash
#
#  Script: ncepvpn
#
#  Author: Eric Engle
#
# Purpose: Shell script wrapper for openconnect to easily connect to NOAA/NCEP's VPN.
#
# ---------------------------------------------------------------------------------------- 
#set -x

# ---------------------------------------------------------------------------------------- 
# Ensure running as root. If the script is run with sudo (i.e. not root), then the
# following will run another instance of this script as sudo.  Note, this is not a
# child process.
# ---------------------------------------------------------------------------------------- 
if [ "$(id -u)" != "0" ]; then
  exec sudo "$0" "$@" 
fi

# ---------------------------------------------------------------------------------------- 
# Return shell prompt to normal state when Ctrl+C or Ctrl+\
# ---------------------------------------------------------------------------------------- 
trap 'stty sane; exit' SIGINT SIGQUIT

# ---------------------------------------------------------------------------------------- 
# Define process ID file
# ---------------------------------------------------------------------------------------- 
NCEPVPN_VERSION="1.1.2"
OPENCONNECT=/usr/sbin/openconnect
PIDFILE=/var/run/openconnect.pid
OS="$(uname)"

# ---------------------------------------------------------------------------------------- 
# Function: connect - wrapper for openconnect. 
# ---------------------------------------------------------------------------------------- 
connect()
{
   # Check if the PIDFILE does not exist, then start openconnect
   if [ ! -f $PIDFILE ]; then
      $OPENCONNECT -u $NCEPUSER --config=$OPENCONNECT_CONFIG --background \
                            --pid-file=$PIDFILE $NCEPHOST
   else
      echo -ne "\n You are currently connected to the NCEP VPN \n\n"
   fi
}

# ---------------------------------------------------------------------------------------- 
# Function: disconnect - Proper way to disconnect openconnect VPN is to send SIGINT
#                        to the process ID.
# ---------------------------------------------------------------------------------------- 
disconnect()
{
   # Check if the PID does not exist.  If it does, then kill the connection.
   if [ ! -f $PIDFILE ]; then
      echo -ne "\n\tYou are not connected to the NCEP VPN\n"
   else
      echo -ne "\n\tDisconnecting from NCEP VPN..."
      kill -SIGINT $(cat $PIDFILE)
      sleep 2
      if [ $? -eq 0 ]; then echo -ne " Done!\n"; fi
   fi
}

# ----------------------------------------------------------------------------------------
# Function: getConfigFiles - Get config file names for ncepvpn and openconnect.
# ----------------------------------------------------------------------------------------
getConfigFiles()
{
   OS_TYPE=$(uname)
   if [[ $OS_TYPE == "Darwin" ]]; then
      USER_HOME=$(dscl . -read /Users/$SUDO_USER NFSHomeDirectory | cut -d":" -f 2 | cut -c2-)
   elif [[ $OS_TYPE == "Linux" ]]; then
      if [ $(grep "$SUDO_USER" /etc/passwd | wc -l) -eq 0 ]; then
         USER_HOME=$(getent passwd | grep "$SUDO_USER" | cut -d":" -f 6)
      else
         USER_HOME=$(grep "$SUDO_USER" /etc/passwd | cut -d":" -f 6)
      fi
   else
      USER_HOME=$(grep "$SUDO_USER" /etc/passwd | cut -d":" -f 6)
   fi
   NCEPVPN_USER_CONFIG=$USER_HOME/.ncepvpn
   OPENCONNECT_CONFIG=$USER_HOME/.openconnect
}

# ---------------------------------------------------------------------------------------- 
# Function: initUser - This creates ~/.ncepvpn which contains the NCEP VPN username. This
#                      file is then read for succeeding connections.  Since the script is
#                      executed as sudo, we change the ownership of ~/.ncepvpn to the
#                      actual user defined in SUDO_USER.
# ---------------------------------------------------------------------------------------- 
initUser()
{

   # Check for openconnect
   if [ ! -x $OPENCONNECT ]; then
      echo "$(basename $0): openconnect not found"
      exit 1
   fi
   
   # Get the config file names
   getConfigFiles
   
   # Test if ncepvpn config file is present.  If so, then read from it.  If not, make it.
   if [ -f $NCEPVPN_USER_CONFIG ]; then
      NCEPHOST=$(sed -n 1p $NCEPVPN_USER_CONFIG)
      NCEPUSER=$(sed -n 2p $NCEPVPN_USER_CONFIG)
   else
      echo "Creating NCEP VPN Configuration file $NCEPVPN_USER_CONFIG"
      read -p "Enter NCEP VPN Hostname: " NCEPHOST
      if [[ $NCEPHOST != https://* ]]; then NCEPHOST="https://$NCEPHOST"; fi
      echo $NCEPHOST >> $NCEPVPN_USER_CONFIG
      read -p "Enter your NCEP VPN Username: " NCEPUSER
      echo $NCEPUSER >> $NCEPVPN_USER_CONFIG
      chown $SUDO_USER:$SUDO_USER $NCEPVPN_USER_CONFIG
   fi
    
   # Openconnect config file must be present or else openconnect will error.  The file
   # can be empty (i.e. no config options inside).
   if [ ! -f $OPENCONNECT_CONFIG ]; then
      touch $OPENCONNECT_CONFIG
      chown $SUDO_USER:$SUDO_USER $OPENCONNECT_CONFIG
   fi
}

# ---------------------------------------------------------------------------------------- 
# Function: status - Echo the status of the openconnect VPN connection.  Here we are
#                    simply testing if PIDFILE is present.
# ---------------------------------------------------------------------------------------- 
status()
{
   if [ ! -f $PIDFILE ]; then
      echo -e "State: Disconnected\n"
   else
      if [ "$OS" == "Darwin" ]; then
         echo -e "State: Connected since $(stat $PIDFILE | cut -d\\\" -f2)\n"
      elif [ "$OS" == "Linux" ]; then
         echo -e "State: Connected since $(stat --printf=%y $PIDFILE | cut -d. -f1)\n"
   fi
}

# ---------------------------------------------------------------------------------------- 
# Function: usage - Print usage when no arg is passed.
# ---------------------------------------------------------------------------------------- 
usage()
{
cat << EOF

$(basename $0) version $NCEPVPN_VERSION

Usage: $(basename $0) [c|d]

       c - Connect. Can also use "con" or "connect".
       d - Disconnect. Can also use "dis" or "disconnect".
       
Config Files:
   ncepvpn: $NCEPVPN_USER_CONFIG
   openconnect: $OPENCONNECT_CONFIG
   
EOF
}

# ---------------------------------------------------------------------------------------- 
# Main script
# ---------------------------------------------------------------------------------------- 
case "$1" in

   c|con|connect)
      initUser
      connect
      ;;
   d|dis|disconnect)
      disconnect
      ;;
   *)
      getConfigFiles
      usage
      status
      ;;

esac

exit 0
